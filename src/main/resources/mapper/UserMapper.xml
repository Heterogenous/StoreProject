<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rain.mapper.UserMapper">
    <!--设置user所有字段的名称-->
    <sql id="allColumn">
        uid,username,password,salt,phone,email,gender,avatar,is_delete,
        created_user,created_time,modified_user,modified_time
    </sql>
    <!--
        自定义映射规则
        id属性:标签给这个映射负责分配一个唯一的id
        type属性：取值是一个类，表示的是数据库中的查询结果与java中哪个实体类进行结果集的映射
    -->
    <resultMap id="UserEntityMap" type="com.rain.entity.User">
        <!--将表中的资源和类的属性不一致的字段进行匹配指定，名称一致的字段可以省略不写-->
        <!--
            配合完成名称不一致的映射:
            column属性：表示表中的字段名称
            property属性：表示类中的属性名称
        -->
        <!--id的标签不可省略-->
        <id column="uid" property="uid"/>
        <result column="is_delete" property="isDelete"/>
        <result column="created_user" property="createdUser"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>
    <!--
        Integer insert(User user);
    -->
    <insert id="insert" parameterType="com.rain.entity.User" useGeneratedKeys="true" keyProperty="uid">
        insert into t_user(
            username,password,salt,phone,email,gender,avatar,is_delete,
            created_user,created_time,modified_user,modified_time
        ) values (
            #{username},#{password},#{salt},#{phone},#{email},#{gender},#{avatar},#{isDelete},
            #{createdUser},#{createdTime},#{modifiedUser},#{modifiedTime}
        )
    </insert>
    <!--
        User findByUsername(String username);
    -->
    <select id="findByUsername" resultMap="UserEntityMap">
        select <include refid="allColumn"/> from t_user where username = #{username}
    </select>
</mapper>